#
# .bash_prompt -- configure fancy bash prompt
#
# List of features:
#
# ^:) user@flounder:dotfiles [master|âœš 1](personal@usw2) [1]$
# ^ ^  ^       ^       ^           ^         ^      ^     ^
# 1 2  3       4       5           6         7      8     9
#
# 1. Every subshell gets an additional ^
# 2. Happy and sad face for command success/failure
# 3. Username when it's not the login user
# 4. Hostname if on an SSH connection
# 5. Current working directory
# 6. Git status from bash-git-prompt
# 7. AWS profile
# 8. AWS region, abbreviated if possible
# 9. Number of background jobs
#
# Plus!
# 10. Username, hostname, pwd in window title always
# 11. iTerm integration

if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
  declare -A aws_regions=(
    [us-west-2]=usw2
    [us-west-1]=usw1
    [us-east-2]=use2
    [us-east-1]=use1
    [ca-central-1]=ca
    [eu-west-1]=euw1
    [eu-central-1]=euc1
  )
fi

gapdir="$HOME/.homesick/repos/git-aware-prompt"
if [[ -d "$gapdir" ]]; then
  #export GITAWAREPROMPT="$gapdir"
  #source "${GITAWAREPROMPT}/main.sh"
  # we only want the color variables, not the prompt.
  # can't use bash-git-prompt colors: https://github.com/magicmonty/bash-git-prompt/pull/470
  source "${gapdir}/colors.sh"
fi

if [[ "$TERM" = "xterm" || "$TERM" = "xterm-color" || \
      "$TERM" = "rxvt"  || "$TERM" = "xterm-256color" ]]; then
  win_title='\[\033]0;\u@\h: \w\007\]'
fi

if [[ $SSH_CONNECTION ]]; then
  host_prompt="\[${txtcyn}\]\h\[${txtrst}\]:"
fi

if [[ $SHLVL -gt 1 ]]; then
  shlvls=''
  for ((i=1; i < $SHLVL; i++)); do
    shlvls="${shlvls}^"
  done
  shlvl_prompt="\[${txtred}\]${shlvls}\[${txtrst}\]"
fi

function face_prompt {
  case $? in
    0) echo -ne "\001${txtcyn}\002:)" ;;
    *) echo -ne "\001${txtred}\002:(" ;;
  esac
  echo -ne "\001${txtrst}\002"
}

function user_prompt {
  local output

  case $USER in
    root)           output="\001${bldred}\002root\001${txtrst}\002" ;;
    rich|rlafferty) output="" ;;
    *)              output="\001${txtpur}\002${USER}\001${txtrst}\002" ;;
  esac

  if [[ $host_prompt && $output ]]; then
    echo -ne "${output}@"
  elif [[ $output ]]; then
    echo -ne "${output}:"
  fi
}

function aws_prompt {
  local profile=${AWS_VAULT:-$AWS_OKTA_PROFILE}
  local region

  if [[ $profile ]]; then
    if [[ "${aws_regions[*]}" && $AWS_DEFAULT_REGION && ${aws_regions[$AWS_DEFAULT_REGION]} ]]; then
      region=${aws_regions[$AWS_DEFAULT_REGION]}
    else
      region=$AWS_DEFAULT_REGION
    fi

    echo -ne "\001$txtcyn\002(\001$txtylw\002${profile}@${region}\001$txtcyn\002)"
  fi
}

# can't use a function for this because bash won't parse \j in a function,
# and any other reasonable way to count jobs would invoke wc on every prompt.
#
# we run 'jobs -r' and 'jobs -s' to exclude "Done" jobs, because bash-git-prompt
# causes one Done job in the list n every prompt cycle, throwing off the
# conditional (but not the \j count, which bash gets right)
jobs_prompt='$([[ "$(jobs -r; jobs -s)" ]] && echo " \[${txtcyn}\][\[${txtrst}\]\j\[${txtcyn}\]]")'

# In a git repo, bash-git-prompt's prompt magic replaces PS1 with
# its own thing, but if GIT_PROMPT_START and GIT_PROMPT_END are defined
# then it replaces PS1 with:
#
#   ${GIT_PROMPT_START}[...the git status...]${GIT_PROMPT_END}
#
# Since I want the status in the middle of my usual prompt, let's build PS1
# using GIT_PROMPT_START and _END rather than having to build both.
#
# single quotes around function calls means they're called at each prompt
#
# this is all complicated by both bash-git-prompt and the iterm integration
# screwing with PS1. (Strangely, it only affects the shlvl prompt missing??)
# Has to be this order:
#  - GIT_PROMPT_START/END
#  - bash-git-prompt
#  - iterm2_shell_integration
#  - compose PS1 from the two pieces of GIT_PROMPT

GIT_PROMPT_START="${win_title}${shlvl_prompt}"'$(face_prompt) $(user_prompt)'"${host_prompt}\[${txtcyn}\]\W\[${txtrst}\]"
GIT_PROMPT_END='$(aws_prompt)'"${jobs_prompt}\[${txtrst}\]\\$ "

if [[ -d ~/.homesick/repos/bash-git-prompt ]]; then
  # _USERNAME_REPO_ maddeningly resets the prompt color :/
  export GIT_PROMPT_PREFIX="[\\[${txtpur}\\]_USERNAME_REPO_\\[${txtpur}\\]@"
  export GIT_PROMPT_WITH_USERNAME_AND_REPO=1
  export GIT_PROMPT_ONLY_IN_REPO=1
  source ~/.homesick/repos/bash-git-prompt/gitprompt.sh
fi

test -e ~/.iterm2_shell_integration.bash && source ~/.iterm2_shell_integration.bash

PS1="${GIT_PROMPT_START}${GIT_PROMPT_END}"
PS2="..."
export MYSQL_PS1="\u@\h:\d> "
